// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_spec.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message_spec.pb.hh"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace torps {
namespace ext {

namespace {

const ::google::protobuf::Descriptor* NodeSpecification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeSpecification_reflection_ = NULL;
const ::google::protobuf::Descriptor* LatencyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LatencyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CoordInit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoordInit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Coordinate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Coordinate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CoordUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoordUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ControlMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControlMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_5fspec_2eproto() {
  protobuf_AddDesc_message_5fspec_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message_spec.proto");
  GOOGLE_CHECK(file != NULL);
  NodeSpecification_descriptor_ = file->message_type(0);
  static const int NodeSpecification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeSpecification, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeSpecification, congestion_dist_),
  };
  NodeSpecification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeSpecification_descriptor_,
      NodeSpecification::default_instance_,
      NodeSpecification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeSpecification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeSpecification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeSpecification));
  LatencyInfo_descriptor_ = file->message_type(1);
  static const int LatencyInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyInfo, n1_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyInfo, n2_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyInfo, latency_),
  };
  LatencyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LatencyInfo_descriptor_,
      LatencyInfo::default_instance_,
      LatencyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LatencyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LatencyInfo));
  CoordInit_descriptor_ = file->message_type(2);
  static const int CoordInit_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordInit, update_interval_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordInit, ping_interval_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordInit, node_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordInit, latency_map_),
  };
  CoordInit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CoordInit_descriptor_,
      CoordInit::default_instance_,
      CoordInit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordInit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordInit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CoordInit));
  Coordinate_descriptor_ = file->message_type(3);
  static const int Coordinate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, vectors_),
  };
  Coordinate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Coordinate_descriptor_,
      Coordinate::default_instance_,
      Coordinate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Coordinate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Coordinate));
  CoordUpdate_descriptor_ = file->message_type(4);
  static const int CoordUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordUpdate, coord_),
  };
  CoordUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CoordUpdate_descriptor_,
      CoordUpdate::default_instance_,
      CoordUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoordUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CoordUpdate));
  ControlMessage_descriptor_ = file->message_type(5);
  static const int ControlMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMessage, init_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMessage, update_data_),
  };
  ControlMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ControlMessage_descriptor_,
      ControlMessage::default_instance_,
      ControlMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ControlMessage));
  Type_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_5fspec_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeSpecification_descriptor_, &NodeSpecification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LatencyInfo_descriptor_, &LatencyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CoordInit_descriptor_, &CoordInit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Coordinate_descriptor_, &Coordinate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CoordUpdate_descriptor_, &CoordUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ControlMessage_descriptor_, &ControlMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_5fspec_2eproto() {
  delete NodeSpecification::default_instance_;
  delete NodeSpecification_reflection_;
  delete LatencyInfo::default_instance_;
  delete LatencyInfo_reflection_;
  delete CoordInit::default_instance_;
  delete CoordInit_reflection_;
  delete Coordinate::default_instance_;
  delete Coordinate_reflection_;
  delete CoordUpdate::default_instance_;
  delete CoordUpdate_reflection_;
  delete ControlMessage::default_instance_;
  delete ControlMessage_reflection_;
}

void protobuf_AddDesc_message_5fspec_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022message_spec.proto\022\ttorps.ext\"8\n\021NodeS"
    "pecification\022\n\n\002id\030\001 \002(\t\022\027\n\017congestion_d"
    "ist\030\002 \003(\001\">\n\013LatencyInfo\022\016\n\006n1_idx\030\001 \002(\r"
    "\022\016\n\006n2_idx\030\002 \002(\r\022\017\n\007latency\030\003 \002(\001\"\254\001\n\tCo"
    "ordInit\022\037\n\027update_interval_seconds\030\001 \002(\r"
    "\022 \n\025ping_interval_seconds\030\002 \001(\r:\0013\022/\n\tno"
    "de_data\030\003 \003(\0132\034.torps.ext.NodeSpecificat"
    "ion\022+\n\013latency_map\030\004 \003(\0132\026.torps.ext.Lat"
    "encyInfo\"J\n\nCoordinate\022\017\n\007node_id\030\001 \002(\t\022"
    "\013\n\003dim\030\002 \002(\005\022\r\n\005error\030\003 \002(\001\022\017\n\007vectors\030\004"
    " \003(\001\"3\n\013CoordUpdate\022$\n\005coord\030\001 \003(\0132\025.tor"
    "ps.ext.Coordinate\"\205\001\n\016ControlMessage\022\035\n\004"
    "type\030\001 \002(\0162\017.torps.ext.Type\022\'\n\tinit_data"
    "\030\002 \001(\0132\024.torps.ext.CoordInit\022+\n\013update_d"
    "ata\030\003 \001(\0132\026.torps.ext.CoordUpdate*%\n\004Typ"
    "e\022\010\n\004INIT\020\001\022\007\n\003GET\020\002\022\n\n\006COORDS\020\003", 632);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message_spec.proto", &protobuf_RegisterTypes);
  NodeSpecification::default_instance_ = new NodeSpecification();
  LatencyInfo::default_instance_ = new LatencyInfo();
  CoordInit::default_instance_ = new CoordInit();
  Coordinate::default_instance_ = new Coordinate();
  CoordUpdate::default_instance_ = new CoordUpdate();
  ControlMessage::default_instance_ = new ControlMessage();
  NodeSpecification::default_instance_->InitAsDefaultInstance();
  LatencyInfo::default_instance_->InitAsDefaultInstance();
  CoordInit::default_instance_->InitAsDefaultInstance();
  Coordinate::default_instance_->InitAsDefaultInstance();
  CoordUpdate::default_instance_->InitAsDefaultInstance();
  ControlMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_5fspec_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_5fspec_2eproto {
  StaticDescriptorInitializer_message_5fspec_2eproto() {
    protobuf_AddDesc_message_5fspec_2eproto();
  }
} static_descriptor_initializer_message_5fspec_2eproto_;
const ::google::protobuf::EnumDescriptor* Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Type_descriptor_;
}
bool Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int NodeSpecification::kIdFieldNumber;
const int NodeSpecification::kCongestionDistFieldNumber;
#endif  // !_MSC_VER

NodeSpecification::NodeSpecification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeSpecification::InitAsDefaultInstance() {
}

NodeSpecification::NodeSpecification(const NodeSpecification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeSpecification::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeSpecification::~NodeSpecification() {
  SharedDtor();
}

void NodeSpecification::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void NodeSpecification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeSpecification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeSpecification_descriptor_;
}

const NodeSpecification& NodeSpecification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fspec_2eproto();
  return *default_instance_;
}

NodeSpecification* NodeSpecification::default_instance_ = NULL;

NodeSpecification* NodeSpecification::New() const {
  return new NodeSpecification;
}

void NodeSpecification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  congestion_dist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeSpecification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_congestion_dist;
        break;
      }

      // repeated double congestion_dist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_congestion_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_congestion_dist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_congestion_dist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_congestion_dist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeSpecification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // repeated double congestion_dist = 2;
  for (int i = 0; i < this->congestion_dist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->congestion_dist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeSpecification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated double congestion_dist = 2;
  for (int i = 0; i < this->congestion_dist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->congestion_dist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeSpecification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  // repeated double congestion_dist = 2;
  {
    int data_size = 0;
    data_size = 8 * this->congestion_dist_size();
    total_size += 1 * this->congestion_dist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeSpecification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeSpecification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeSpecification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeSpecification::MergeFrom(const NodeSpecification& from) {
  GOOGLE_CHECK_NE(&from, this);
  congestion_dist_.MergeFrom(from.congestion_dist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeSpecification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeSpecification::CopyFrom(const NodeSpecification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeSpecification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NodeSpecification::Swap(NodeSpecification* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    congestion_dist_.Swap(&other->congestion_dist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeSpecification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeSpecification_descriptor_;
  metadata.reflection = NodeSpecification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LatencyInfo::kN1IdxFieldNumber;
const int LatencyInfo::kN2IdxFieldNumber;
const int LatencyInfo::kLatencyFieldNumber;
#endif  // !_MSC_VER

LatencyInfo::LatencyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LatencyInfo::InitAsDefaultInstance() {
}

LatencyInfo::LatencyInfo(const LatencyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LatencyInfo::SharedCtor() {
  _cached_size_ = 0;
  n1_idx_ = 0u;
  n2_idx_ = 0u;
  latency_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LatencyInfo::~LatencyInfo() {
  SharedDtor();
}

void LatencyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LatencyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LatencyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LatencyInfo_descriptor_;
}

const LatencyInfo& LatencyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fspec_2eproto();
  return *default_instance_;
}

LatencyInfo* LatencyInfo::default_instance_ = NULL;

LatencyInfo* LatencyInfo::New() const {
  return new LatencyInfo;
}

void LatencyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    n1_idx_ = 0u;
    n2_idx_ = 0u;
    latency_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LatencyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 n1_idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n1_idx_)));
          set_has_n1_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_n2_idx;
        break;
      }

      // required uint32 n2_idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_n2_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n2_idx_)));
          set_has_n2_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_latency;
        break;
      }

      // required double latency = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_latency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latency_)));
          set_has_latency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LatencyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 n1_idx = 1;
  if (has_n1_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->n1_idx(), output);
  }

  // required uint32 n2_idx = 2;
  if (has_n2_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->n2_idx(), output);
  }

  // required double latency = 3;
  if (has_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latency(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LatencyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 n1_idx = 1;
  if (has_n1_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->n1_idx(), target);
  }

  // required uint32 n2_idx = 2;
  if (has_n2_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->n2_idx(), target);
  }

  // required double latency = 3;
  if (has_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->latency(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LatencyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 n1_idx = 1;
    if (has_n1_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n1_idx());
    }

    // required uint32 n2_idx = 2;
    if (has_n2_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n2_idx());
    }

    // required double latency = 3;
    if (has_latency()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LatencyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LatencyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LatencyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LatencyInfo::MergeFrom(const LatencyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_n1_idx()) {
      set_n1_idx(from.n1_idx());
    }
    if (from.has_n2_idx()) {
      set_n2_idx(from.n2_idx());
    }
    if (from.has_latency()) {
      set_latency(from.latency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LatencyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LatencyInfo::CopyFrom(const LatencyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LatencyInfo::Swap(LatencyInfo* other) {
  if (other != this) {
    std::swap(n1_idx_, other->n1_idx_);
    std::swap(n2_idx_, other->n2_idx_);
    std::swap(latency_, other->latency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LatencyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LatencyInfo_descriptor_;
  metadata.reflection = LatencyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CoordInit::kUpdateIntervalSecondsFieldNumber;
const int CoordInit::kPingIntervalSecondsFieldNumber;
const int CoordInit::kNodeDataFieldNumber;
const int CoordInit::kLatencyMapFieldNumber;
#endif  // !_MSC_VER

CoordInit::CoordInit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CoordInit::InitAsDefaultInstance() {
}

CoordInit::CoordInit(const CoordInit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CoordInit::SharedCtor() {
  _cached_size_ = 0;
  update_interval_seconds_ = 0u;
  ping_interval_seconds_ = 3u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CoordInit::~CoordInit() {
  SharedDtor();
}

void CoordInit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CoordInit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoordInit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoordInit_descriptor_;
}

const CoordInit& CoordInit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fspec_2eproto();
  return *default_instance_;
}

CoordInit* CoordInit::default_instance_ = NULL;

CoordInit* CoordInit::New() const {
  return new CoordInit;
}

void CoordInit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    update_interval_seconds_ = 0u;
    ping_interval_seconds_ = 3u;
  }
  node_data_.Clear();
  latency_map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CoordInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 update_interval_seconds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_interval_seconds_)));
          set_has_update_interval_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ping_interval_seconds;
        break;
      }

      // optional uint32 ping_interval_seconds = 2 [default = 3];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ping_interval_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_interval_seconds_)));
          set_has_ping_interval_seconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_node_data;
        break;
      }

      // repeated .torps.ext.NodeSpecification node_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_node_data;
        if (input->ExpectTag(34)) goto parse_latency_map;
        break;
      }

      // repeated .torps.ext.LatencyInfo latency_map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_latency_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_latency_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_latency_map;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CoordInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 update_interval_seconds = 1;
  if (has_update_interval_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->update_interval_seconds(), output);
  }

  // optional uint32 ping_interval_seconds = 2 [default = 3];
  if (has_ping_interval_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ping_interval_seconds(), output);
  }

  // repeated .torps.ext.NodeSpecification node_data = 3;
  for (int i = 0; i < this->node_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->node_data(i), output);
  }

  // repeated .torps.ext.LatencyInfo latency_map = 4;
  for (int i = 0; i < this->latency_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->latency_map(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CoordInit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 update_interval_seconds = 1;
  if (has_update_interval_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->update_interval_seconds(), target);
  }

  // optional uint32 ping_interval_seconds = 2 [default = 3];
  if (has_ping_interval_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ping_interval_seconds(), target);
  }

  // repeated .torps.ext.NodeSpecification node_data = 3;
  for (int i = 0; i < this->node_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->node_data(i), target);
  }

  // repeated .torps.ext.LatencyInfo latency_map = 4;
  for (int i = 0; i < this->latency_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->latency_map(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CoordInit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 update_interval_seconds = 1;
    if (has_update_interval_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_interval_seconds());
    }

    // optional uint32 ping_interval_seconds = 2 [default = 3];
    if (has_ping_interval_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping_interval_seconds());
    }

  }
  // repeated .torps.ext.NodeSpecification node_data = 3;
  total_size += 1 * this->node_data_size();
  for (int i = 0; i < this->node_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node_data(i));
  }

  // repeated .torps.ext.LatencyInfo latency_map = 4;
  total_size += 1 * this->latency_map_size();
  for (int i = 0; i < this->latency_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->latency_map(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoordInit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CoordInit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CoordInit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CoordInit::MergeFrom(const CoordInit& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_data_.MergeFrom(from.node_data_);
  latency_map_.MergeFrom(from.latency_map_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_update_interval_seconds()) {
      set_update_interval_seconds(from.update_interval_seconds());
    }
    if (from.has_ping_interval_seconds()) {
      set_ping_interval_seconds(from.ping_interval_seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CoordInit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoordInit::CopyFrom(const CoordInit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordInit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < node_data_size(); i++) {
    if (!this->node_data(i).IsInitialized()) return false;
  }
  for (int i = 0; i < latency_map_size(); i++) {
    if (!this->latency_map(i).IsInitialized()) return false;
  }
  return true;
}

void CoordInit::Swap(CoordInit* other) {
  if (other != this) {
    std::swap(update_interval_seconds_, other->update_interval_seconds_);
    std::swap(ping_interval_seconds_, other->ping_interval_seconds_);
    node_data_.Swap(&other->node_data_);
    latency_map_.Swap(&other->latency_map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CoordInit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoordInit_descriptor_;
  metadata.reflection = CoordInit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Coordinate::kNodeIdFieldNumber;
const int Coordinate::kDimFieldNumber;
const int Coordinate::kErrorFieldNumber;
const int Coordinate::kVectorsFieldNumber;
#endif  // !_MSC_VER

Coordinate::Coordinate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Coordinate::InitAsDefaultInstance() {
}

Coordinate::Coordinate(const Coordinate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Coordinate::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dim_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Coordinate::~Coordinate() {
  SharedDtor();
}

void Coordinate::SharedDtor() {
  if (node_id_ != &::google::protobuf::internal::kEmptyString) {
    delete node_id_;
  }
  if (this != default_instance_) {
  }
}

void Coordinate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Coordinate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Coordinate_descriptor_;
}

const Coordinate& Coordinate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fspec_2eproto();
  return *default_instance_;
}

Coordinate* Coordinate::default_instance_ = NULL;

Coordinate* Coordinate::New() const {
  return new Coordinate;
}

void Coordinate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_node_id()) {
      if (node_id_ != &::google::protobuf::internal::kEmptyString) {
        node_id_->clear();
      }
    }
    dim_ = 0;
    error_ = 0;
  }
  vectors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Coordinate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string node_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_id().data(), this->node_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dim;
        break;
      }

      // required int32 dim = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dim_)));
          set_has_dim();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_error;
        break;
      }

      // required double error = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_vectors;
        break;
      }

      // repeated double vectors = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_vectors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_vectors())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_vectors())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_vectors;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Coordinate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->node_id(), output);
  }

  // required int32 dim = 2;
  if (has_dim()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dim(), output);
  }

  // required double error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->error(), output);
  }

  // repeated double vectors = 4;
  for (int i = 0; i < this->vectors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->vectors(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Coordinate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_id().data(), this->node_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->node_id(), target);
  }

  // required int32 dim = 2;
  if (has_dim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dim(), target);
  }

  // required double error = 3;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->error(), target);
  }

  // repeated double vectors = 4;
  for (int i = 0; i < this->vectors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->vectors(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Coordinate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_id());
    }

    // required int32 dim = 2;
    if (has_dim()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dim());
    }

    // required double error = 3;
    if (has_error()) {
      total_size += 1 + 8;
    }

  }
  // repeated double vectors = 4;
  {
    int data_size = 0;
    data_size = 8 * this->vectors_size();
    total_size += 1 * this->vectors_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Coordinate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Coordinate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Coordinate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Coordinate::MergeFrom(const Coordinate& from) {
  GOOGLE_CHECK_NE(&from, this);
  vectors_.MergeFrom(from.vectors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_dim()) {
      set_dim(from.dim());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Coordinate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coordinate::CopyFrom(const Coordinate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coordinate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Coordinate::Swap(Coordinate* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(dim_, other->dim_);
    std::swap(error_, other->error_);
    vectors_.Swap(&other->vectors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Coordinate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Coordinate_descriptor_;
  metadata.reflection = Coordinate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CoordUpdate::kCoordFieldNumber;
#endif  // !_MSC_VER

CoordUpdate::CoordUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CoordUpdate::InitAsDefaultInstance() {
}

CoordUpdate::CoordUpdate(const CoordUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CoordUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CoordUpdate::~CoordUpdate() {
  SharedDtor();
}

void CoordUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CoordUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoordUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoordUpdate_descriptor_;
}

const CoordUpdate& CoordUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fspec_2eproto();
  return *default_instance_;
}

CoordUpdate* CoordUpdate::default_instance_ = NULL;

CoordUpdate* CoordUpdate::New() const {
  return new CoordUpdate;
}

void CoordUpdate::Clear() {
  coord_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CoordUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .torps.ext.Coordinate coord = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_coord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_coord;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CoordUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .torps.ext.Coordinate coord = 1;
  for (int i = 0; i < this->coord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->coord(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CoordUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .torps.ext.Coordinate coord = 1;
  for (int i = 0; i < this->coord_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->coord(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CoordUpdate::ByteSize() const {
  int total_size = 0;

  // repeated .torps.ext.Coordinate coord = 1;
  total_size += 1 * this->coord_size();
  for (int i = 0; i < this->coord_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->coord(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoordUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CoordUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CoordUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CoordUpdate::MergeFrom(const CoordUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  coord_.MergeFrom(from.coord_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CoordUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoordUpdate::CopyFrom(const CoordUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordUpdate::IsInitialized() const {

  for (int i = 0; i < coord_size(); i++) {
    if (!this->coord(i).IsInitialized()) return false;
  }
  return true;
}

void CoordUpdate::Swap(CoordUpdate* other) {
  if (other != this) {
    coord_.Swap(&other->coord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CoordUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoordUpdate_descriptor_;
  metadata.reflection = CoordUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ControlMessage::kTypeFieldNumber;
const int ControlMessage::kInitDataFieldNumber;
const int ControlMessage::kUpdateDataFieldNumber;
#endif  // !_MSC_VER

ControlMessage::ControlMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ControlMessage::InitAsDefaultInstance() {
  init_data_ = const_cast< ::torps::ext::CoordInit*>(&::torps::ext::CoordInit::default_instance());
  update_data_ = const_cast< ::torps::ext::CoordUpdate*>(&::torps::ext::CoordUpdate::default_instance());
}

ControlMessage::ControlMessage(const ControlMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ControlMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  init_data_ = NULL;
  update_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControlMessage::~ControlMessage() {
  SharedDtor();
}

void ControlMessage::SharedDtor() {
  if (this != default_instance_) {
    delete init_data_;
    delete update_data_;
  }
}

void ControlMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlMessage_descriptor_;
}

const ControlMessage& ControlMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fspec_2eproto();
  return *default_instance_;
}

ControlMessage* ControlMessage::default_instance_ = NULL;

ControlMessage* ControlMessage::New() const {
  return new ControlMessage;
}

void ControlMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_init_data()) {
      if (init_data_ != NULL) init_data_->::torps::ext::CoordInit::Clear();
    }
    if (has_update_data()) {
      if (update_data_ != NULL) update_data_->::torps::ext::CoordUpdate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ControlMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .torps.ext.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::torps::ext::Type_IsValid(value)) {
            set_type(static_cast< ::torps::ext::Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_init_data;
        break;
      }

      // optional .torps.ext.CoordInit init_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_init_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_update_data;
        break;
      }

      // optional .torps.ext.CoordUpdate update_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ControlMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .torps.ext.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .torps.ext.CoordInit init_data = 2;
  if (has_init_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->init_data(), output);
  }

  // optional .torps.ext.CoordUpdate update_data = 3;
  if (has_update_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->update_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ControlMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .torps.ext.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .torps.ext.CoordInit init_data = 2;
  if (has_init_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->init_data(), target);
  }

  // optional .torps.ext.CoordUpdate update_data = 3;
  if (has_update_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->update_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ControlMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .torps.ext.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .torps.ext.CoordInit init_data = 2;
    if (has_init_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->init_data());
    }

    // optional .torps.ext.CoordUpdate update_data = 3;
    if (has_update_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ControlMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ControlMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControlMessage::MergeFrom(const ControlMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_init_data()) {
      mutable_init_data()->::torps::ext::CoordInit::MergeFrom(from.init_data());
    }
    if (from.has_update_data()) {
      mutable_update_data()->::torps::ext::CoordUpdate::MergeFrom(from.update_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ControlMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlMessage::CopyFrom(const ControlMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_init_data()) {
    if (!this->init_data().IsInitialized()) return false;
  }
  if (has_update_data()) {
    if (!this->update_data().IsInitialized()) return false;
  }
  return true;
}

void ControlMessage::Swap(ControlMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(init_data_, other->init_data_);
    std::swap(update_data_, other->update_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ControlMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControlMessage_descriptor_;
  metadata.reflection = ControlMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ext
}  // namespace torps

// @@protoc_insertion_point(global_scope)

# useful code fragments for testing path simulator (pathsim.py)

import stem.descriptor.reader as sdr
import datetime
import os
import os.path
import stem.descriptor as sd
import stem.descriptor.networkstatus as sdn
import stem
import random
import sys
import collections
import pathsim

def timestamp(t):
    """Returns UNIX timestamp"""
    td = t - datetime.datetime(1970, 1, 1)
    ts = td.days*24*60*60 + td.seconds
    return ts

### read in consensuses and (old-style) processed descriptors ###
r_file = 'in/cons-2012-08-02-00/2012-08-02-00-00-00-consensus'
d_file = 'out/desc-2012-08-02-00/2012-08-02-00-00-00-descriptor'
descriptors = {}

cur_period_start = None
cur_period_end = None

cons_valid_after = None
cons_fresh_until = None
cons_bw_weights = None
cons_bwweightscale = None        
cons_rel_stats = {}

with open(d_file, 'r') as df:
    for desc in sd.parse_file(df, validate=False):
        descriptors[desc.fingerprint] = desc
with open(r_file, 'r') as cf:        
    for rel_stat in sd.parse_file(cf, validate=False):
        cons_valid_after = \
            timestamp(rel_stat.document.valid_after)
        cur_period_start = cons_valid_after
        cons_fresh_until = \
            timestamp(rel_stat.document.fresh_until)
        cur_period_end = cons_fresh_until
        cons_bw_weights = rel_stat.document.bandwidth_weights
        if ('bwweightscale' in rel_stat.document.params):
            cons_bwweightscale = rel_stat.document.params[\
                'bwweightscale']
        else:
            cons_bwweightscale = 10000  
        if (rel_stat.fingerprint in descriptors):
            cons_rel_stats[rel_stat.fingerprint] = rel_stat
######

### read in all descriptors from a month ###
sd_dir = 'in/server-descriptors-2012-08'
num_descriptors = 0    
num_relays = 0
all_descriptors = {}
with sdr.DescriptorReader(sd_dir, validate=True) as reader:
    for desc in reader:
        if (num_descriptors % 10000 == 0):
            print('{0} descriptors processed.'.format(num_descriptors))
        num_descriptors += 1
        if (desc.fingerprint not in all_descriptors):
            all_descriptors[desc.fingerprint] = {}
            num_relays += 1
        all_descriptors[desc.fingerprint][timestamp(desc.published)] = desc
print('#descriptors: {0}; #relays:{1}'.\
    format(num_descriptors,num_relays)) 
######

#### go through hibernate statuses for a given relay in all_descriptors ###
fprint = 'BC77196F4730442A96E36E1A13B3FF8DC14151EB' # RememberJobs
descs = all_descriptors[fprint]
desc_times = sorted(descs.keys())
for t in desc_times:
    print('{0} ({1}): {2}'.format(descs[t].published.strftime('%Y-%m-%d %H:%M:%S'), t, descs[t].hibernating))
######

###### look for hibernating statuses of a given relay ######
fprint = 'FD688C0692D87AC0D04D42FF4C606FF1AB420C9E'
for hs in hibernating_statuses:
    if (hs[1] == fprint):
        print(hs)
######

##### Find IPs belonging to fingerprint among input consensuses #####
# find all ips used by a fingerprint in a series of consensuses

# Top guards 3/12-4/12
"""
1       0.0462  1439    9F89491CAB7B03685DEABD358E193FFA74D8D836        BigBoy
2       0.0254  1438    00C2C2A16AEDB51D5E5FB7D6168FC66B343D822F        ph3x
3       0.0225  1439    F08F537D245A65D9C242359983718A19650A25F7        TORy2
4       0.0206  1439    A5391793076E013A8218B56CCADE2A8DE7011D08        TORy3
5       0.0194  1439    2ABCD0F0459CA3CDE587DBFDC7336B09718F3C0E        PPrivCom016
6       0.0193  1168    2FFCCEACE86D8CA306D069386A65359BCEE8D67A        oilsrv1
7       0.0189  1016    27C94A1E4DFEDD64C9760556C8E2593EC05EEF46        OldPlanetExpress
8       0.0185  207     64F9CA01A8465CF6FAEA4DF7945795541E74F42C        OnionsAndAtoms
9       0.0167  900     3880FA127EE3C5C147C0E07C80B976BFC557E8FB        IDXFdotcomMinz
10      0.0164  1439    47A608BF6C8D1E0C7C9F8145925120A54CF0DF04        TORy1
11      0.0161  1439    D82183B1C09E1D7795FF2D7116BAB5106AA3E60E        PPrivCom012
12      0.0157  1439    3BE54669CA572B3126079BC20E46E89280EA3703        PPrivCom034
13      0.0156  1439    01C5B10C5C6B1DEB47612E66EBF315B7C64DE803        tornodeviennasil
14      0.0154  1439    C1E400DD480FE1C81BC525B86E17667937743554        PPrivCom013
15      0.0153  1429    36D2672D7DA7820236D1007AEDACAF068E68221C        epsilon
16      0.0143  1193    B5E01E7F86AD5A6563F41BF4B244EBFEFB8D5245        Celestra
17      0.0141  1437    C37B234FAD013453B90375EB55864FEBC876104A        PPrivCom052
18      0.0136  1438    FF986A4573185A6912A0FF28335210CC05CE00DE        Evey
19      0.0135  209     17B82BCC67063E01817E7FD03ED15E345E9FE4A9        c516a
20      0.0135  1438    E1BEDFFFB8DD4977748500D7F54207AE33375B85        rueckgrat
21      0.0131  1439    B746085FCE4F5D4D3ADCCE1D62D34D21C422428D        fejk
22      0.0128  359     B3C940F41C692FEBE7838D608BFF6114F936C3C6        c00psTOR2
23      0.0127  1439    ADD7E99905E666BEF585AC6B8C5795B1C4422C7A        tornadic
24      0.0121  995     84D26BCB09A05AF853C71911C496A194AE02A313        Vork
25      0.0112  636     4691F2DB0EC3EB22D9E6C56F8BDB15D1E43A60B5        newzbin
26      0.0107  1076    39A0907D409836D7F014364C5FF5AC1DA79E0289        BramaH4
27      0.0103  1439    753E0B5922E34BF98F0D21CC08EA7D1ADEEE2F6B        TORy0
28      0.0100  1439    43BE706E24143AB6B3B86DBF7CD4FDE1E0C4CAF1        nixnix
29      0.0097  407     6B53D408A434C2410FADA8224097CC60A441F7C5        yawnbox
30      0.0096  1439    D87A71E5EC936501FBD0E613D309CE4CE2091F62        nononononon
31      0.0096  1439    5CA270839485FDB08828CA095EF49F465F897B8A        FordModelA
32      0.0094  1439    E57A476CD4DFBD99B4EE52A100A58610AD6E80B9        ergebnisoffen
"""

# Top exits 3/12-4/12
"""
#       tot_bw  max_pr  min_pr  Fingerprint                                     Nickname
1       36.3440 0.0601  0.0018  FA486415B86D28CD047D10F76768E4E88A182F71        ZhangPoland1
2       31.7415 0.0453  0.0006  DB8C6D8E0D51A42BDDA81A9B8A735B41B2CF95D1        rainbowwarrior
3       31.5407 0.0943  0.0003  6F383C2629471E1AE7DA053D04625AAED69844CC        hazare
4       30.7675 0.0967  0.0035  D223399907113A1F216AAA64997BC1D4CFA8E1AC        TorLand1
5       30.4727 0.0870  0.0003  055D304E29CF064A8CB8AB2C13AEDB836BB79AF5        manning
6       30.3798 0.0416  0.0007  253DFF1838A2B7782BE7735F74E50090D46CA1BC        chomsky
7       29.8290 0.0693  0.0005  6586CEE14353DD1E6FAF3F172A23B00119A67C57        saeed
8       28.8782 0.0800  0.0007  0ECBAB33DD27A6DA5C1141B39F839F931F92334C        wau
9       28.7880 0.0822  0.0032  945CBBA599808018749DDC4EBB592168F2858C1B        TorLand2
10      28.0653 0.0364  0.0057  AD6C2377E01611F56C33F84BB4AE663A1DA5B3B3        chaoscomputerclub18
11      27.8544 0.0843  0.0003  DA29C7BD34640D749392DFA7919AB1E9AEADC311        bolobolo
12      27.4245 0.0368  0.0063  B8F81CF0C665EA8BE947F102CBFF97615F1FF300        chaoscomputerclub21
13      27.3033 0.0405  0.0033  A59E1E7C7EAEE083D756EE1FF6EC31CA3D8651D7        chaoscomputerclub19
14      26.4995 0.0342  0.0038  CFA48FC3E843DFF01AA026EC77010AB57E8C2FF0        chaoscomputerclub20
15      26.4878 0.0487  0.0017  505BD69565964F7B20D51A3FC4A4825BD93CA444        Unnamed
16      25.6571 0.0362  0.0015  557BF41C1CE1E1B48283B7E97630E42DED889A3D        Unnamed
17      24.3762 0.0396  0.0076  B93DCC053D7F0472BB17A4514E06FE76D9FB714B        politkovskaja2
18      24.3207 0.0335  0.0079  7DCB5313B9541DD29C94BFDE0ADF91DC91D2CFE9        politkovskaja
19      23.5265 0.0326  0.0054  24B1F63F7DF9F85D711864811CC401BE5EB5FB9A        lumumba
20      23.4630 0.0550  0.0004  09C0C5800177BF3A11A78A98A1CAFD8E7AD2EA02        TorLand5
21      22.8714 0.0506  0.0003  3D0FAFB36EB9FC9D1EFD68758E2B0025117D3D1B        hazare2
22      19.9259 0.0415  0.0001  948CDA1CE63D2165567B81706CD8C0E9F8934A47        gurgle
23      19.5435 0.0385  0.0036  4186509C707E96B77B51A76F8294D7E22FF52C61        raskin
24      18.7572 0.0348  0.0044  659DF6537D605FEAB3B77E58E75342D704F0A799        chaoscomputerclub4
25      18.3783 0.0271  0.0023  A9C039A5FD02FCA06303DCFAABE25C5912C63B26        chaoscomputerclub5
26      18.3426 0.0261  0.0051  2624AE0466BD02AFAF3F263D4361D79ABE0E7E05        Unnamed
27      18.2103 0.0310  0.0035  92D151A8219CC742DE7E0EAEB6D18FAF9793BA79        chaoscomputerclub6
28      18.2055 0.1105  0.0000  F3D4C7479F8789758A77FF61D2D8929311568394        gorz
29      17.9496 0.0298  0.0027  7610BBD3F5BB67284EEE8476721AE6109DC29BEA        chaoscomputerclub3
30      16.9837 0.0270  0.0017  F97F3B153FED6604230CD497A3D1E9815B007636        noiseexit01a
31      16.5503 0.0294  0.0011  9C98B38FE270546C69205E16047B8D46BBBB0447        noiseexit01d
32      16.4503 0.0330  0.0020  FE6830704AB953189789AE04C5B22DE34CA2B9D8        noiseexit01b
33      16.2276 0.0266  0.0011  3A415473854F9F082F16EECDFE436218FE1169EA        noiseexit01c
34      16.1254 0.0232  0.0030  47916CAB5878C810E7EF71A316D37FC823CC7F52        CCN
35      15.2263 0.0266  0.0015  721E494B0E06554D8F9A169BDBF17282C07B2588        desync
36      14.7771 0.0302  0.0048  9D4D995AA745A3CAA6276AFAD505D3E4097AA075        BostonUCompSci
37      14.6791 0.0261  0.0030  67FD1D03F922975269F94EC7E4FD38C6D0E5E900        bouazizi
38      10.0614 0.0224  0.0002  37848F17E62FE71A2B7A79C2F2785DEB14BA41DD        proxyleaks
39      9.3474  0.0213  0.0000  C268951C14DFA5265004B8AB10BE3A33EC00DA16        Revisited
40      8.8555  0.0168  0.0021  1D8625690AB9729FB2040D8194EC0D6789A4D092        TOR1CINIPAC
41      8.7793  0.0104  0.0031  CA1CF70F4E6AF9172E6E743AC5F1E918FFE2B476        spfTOR3
42      8.0205  0.0160  0.0005  A10C4F666D27364036B562823E5830BC448E046A        DFRI1
43      8.0042  0.0158  0.0017  624926802351575FF7E4E3D60EFA3BFB56E640ED        torleaseweb
44      7.8273  0.0146  0.0006  35E8B344F661F4F2E68B17648F35798B44672D7E        aabrtornode
45      7.8134  0.0147  0.0001  805A401EC14E1C6013CB5D9952CC117F466BA805        Gabor
46      7.6946  0.0225  0.0000  B103DA1150F11F1018664CD2B6FD6A6005FA907C        Roady
47      7.6032  0.0852  0.0000  43691853EA556C21A77E006886A5DC579855F527        wau2
48      7.2677  0.0106  0.0003  14BE6D0789A234BC4C1866B809D8062D22EE38CF        gpfTOR7
49      7.2113  0.0116  0.0028  04B24C51D6C8D615FBC3168446963A9E771E0389        micksrelay
50      7.1144  0.0128  0.0001  DD8BD7307017407FCC36F8D04A688F74A0774C02        DFRI0
"""

# Top in 8/12
##	Prob.	Uptime	Fingerprint					Nickname
#1	0.0339	23	6557396CF0EE5B72563A22BCAA0FF26E77FA3D08	KromyonWH3

top_guards = {'9F89491CAB7B03685DEABD358E193FFA74D8D836':True,\
	'00C2C2A16AEDB51D5E5FB7D6168FC66B343D822F':True,\
	'F08F537D245A65D9C242359983718A19650A25F7':True,\
	'A5391793076E013A8218B56CCADE2A8DE7011D08':True,\
	'2ABCD0F0459CA3CDE587DBFDC7336B09718F3C0E':True,\
	'2FFCCEACE86D8CA306D069386A65359BCEE8D67A':True,\
	'27C94A1E4DFEDD64C9760556C8E2593EC05EEF46':True,\
	'64F9CA01A8465CF6FAEA4DF7945795541E74F42C':True,\
	'3880FA127EE3C5C147C0E07C80B976BFC557E8FB':True,\
	'47A608BF6C8D1E0C7C9F8145925120A54CF0DF04':True,\
	'D82183B1C09E1D7795FF2D7116BAB5106AA3E60E':True,\
	'3BE54669CA572B3126079BC20E46E89280EA3703':True,\
	'01C5B10C5C6B1DEB47612E66EBF315B7C64DE803':True,\
	'C1E400DD480FE1C81BC525B86E17667937743554':True,\
	'36D2672D7DA7820236D1007AEDACAF068E68221C':True,\
	'B5E01E7F86AD5A6563F41BF4B244EBFEFB8D5245':True,\
	'C37B234FAD013453B90375EB55864FEBC876104A':True,\
	'FF986A4573185A6912A0FF28335210CC05CE00DE':True,\
	'17B82BCC67063E01817E7FD03ED15E345E9FE4A9':True,\
	'E1BEDFFFB8DD4977748500D7F54207AE33375B85':True,\
	'B746085FCE4F5D4D3ADCCE1D62D34D21C422428D':True,\
	'B3C940F41C692FEBE7838D608BFF6114F936C3C6':True,\
	'ADD7E99905E666BEF585AC6B8C5795B1C4422C7A':True,\
	'84D26BCB09A05AF853C71911C496A194AE02A313':True,\
	'4691F2DB0EC3EB22D9E6C56F8BDB15D1E43A60B5':True,\
	'39A0907D409836D7F014364C5FF5AC1DA79E0289':True,\
	'753E0B5922E34BF98F0D21CC08EA7D1ADEEE2F6B':True,\
	'43BE706E24143AB6B3B86DBF7CD4FDE1E0C4CAF1':True,\
	'6B53D408A434C2410FADA8224097CC60A441F7C5':True,\
	'D87A71E5EC936501FBD0E613D309CE4CE2091F62':True,\
	'5CA270839485FDB08828CA095EF49F465F897B8A':True,\
	'E57A476CD4DFBD99B4EE52A100A58610AD6E80B9':True}    
    
top_exits = {'FA486415B86D28CD047D10F76768E4E88A182F71':True,\
	'DB8C6D8E0D51A42BDDA81A9B8A735B41B2CF95D1':True,\
	'6F383C2629471E1AE7DA053D04625AAED69844CC':True,\
	'D223399907113A1F216AAA64997BC1D4CFA8E1AC':True,\
	'055D304E29CF064A8CB8AB2C13AEDB836BB79AF5':True,\
	'253DFF1838A2B7782BE7735F74E50090D46CA1BC':True,\
	'6586CEE14353DD1E6FAF3F172A23B00119A67C57':True,\
	'0ECBAB33DD27A6DA5C1141B39F839F931F92334C':True,\
	'945CBBA599808018749DDC4EBB592168F2858C1B':True,\
	'AD6C2377E01611F56C33F84BB4AE663A1DA5B3B3':True,\
	'DA29C7BD34640D749392DFA7919AB1E9AEADC311':True,\
	'B8F81CF0C665EA8BE947F102CBFF97615F1FF300':True,\
	'A59E1E7C7EAEE083D756EE1FF6EC31CA3D8651D7':True,\
	'CFA48FC3E843DFF01AA026EC77010AB57E8C2FF0':True,\
	'505BD69565964F7B20D51A3FC4A4825BD93CA444':True,\
	'557BF41C1CE1E1B48283B7E97630E42DED889A3D':True,\
	'B93DCC053D7F0472BB17A4514E06FE76D9FB714B':True,\
	'7DCB5313B9541DD29C94BFDE0ADF91DC91D2CFE9':True,\
	'24B1F63F7DF9F85D711864811CC401BE5EB5FB9A':True,\
	'09C0C5800177BF3A11A78A98A1CAFD8E7AD2EA02':True,\
	'3D0FAFB36EB9FC9D1EFD68758E2B0025117D3D1B':True,\
	'948CDA1CE63D2165567B81706CD8C0E9F8934A47':True,\
	'4186509C707E96B77B51A76F8294D7E22FF52C61':True,\
	'659DF6537D605FEAB3B77E58E75342D704F0A799':True,\
	'A9C039A5FD02FCA06303DCFAABE25C5912C63B26':True,\
	'2624AE0466BD02AFAF3F263D4361D79ABE0E7E05':True,\
	'92D151A8219CC742DE7E0EAEB6D18FAF9793BA79':True,\
	'F3D4C7479F8789758A77FF61D2D8929311568394':True,\
	'7610BBD3F5BB67284EEE8476721AE6109DC29BEA':True,\
	'F97F3B153FED6604230CD497A3D1E9815B007636':True,\
	'9C98B38FE270546C69205E16047B8D46BBBB0447':True,\
	'FE6830704AB953189789AE04C5B22DE34CA2B9D8':True,\
	'3A415473854F9F082F16EECDFE436218FE1169EA':True,\
	'47916CAB5878C810E7EF71A316D37FC823CC7F52':True,\
	'721E494B0E06554D8F9A169BDBF17282C07B2588':True,\
	'9D4D995AA745A3CAA6276AFAD505D3E4097AA075':True,\
	'67FD1D03F922975269F94EC7E4FD38C6D0E5E900':True,\
	'37848F17E62FE71A2B7A79C2F2785DEB14BA41DD':True,\
	'C268951C14DFA5265004B8AB10BE3A33EC00DA16':True,\
	'1D8625690AB9729FB2040D8194EC0D6789A4D092':True,\
	'CA1CF70F4E6AF9172E6E743AC5F1E918FFE2B476':True,\
	'A10C4F666D27364036B562823E5830BC448E046A':True,\
	'624926802351575FF7E4E3D60EFA3BFB56E640ED':True,\
	'35E8B344F661F4F2E68B17648F35798B44672D7E':True,\
	'805A401EC14E1C6013CB5D9952CC117F466BA805':True,\
	'B103DA1150F11F1018664CD2B6FD6A6005FA907C':True,\
	'43691853EA556C21A77E006886A5DC579855F527':True,\
	'14BE6D0789A234BC4C1866B809D8062D22EE38CF':True,\
	'04B24C51D6C8D615FBC3168446963A9E771E0389':True,\
	'DD8BD7307017407FCC36F8D04A688F74A0774C02':True}

in_consensuses_dir = 'in/cons-2012-03--04'
top_guard_ips = {}
top_exit_ips = {}
for guard in top_guards:
    top_guard_ips[guard] = {}
for exit in top_exits:
    top_exit_ips[exit] = {}
pathnames = []
for dirpath, dirnames, fnames in os.walk(in_consensuses_dir, followlinks=True):
    for fname in fnames:
        pathnames.append(os.path.join(dirpath,fname))
pathnames.sort()
for pathname in pathnames:
    filename = os.path.basename(pathname)
    if (filename[0] == '.'):
        continue
    
    print('Processing consensus file {0}'.format(filename))
    cons_valid_after = None
    cons_f = open(pathname, 'rb')
    for r_stat in sd.parse_file(cons_f, validate=False):
        if (cons_valid_after == None):
            cons_valid_after = r_stat.document.valid_after
            # compute timestamp version once here
            valid_after_ts = timestamp(cons_valid_after)
    
        if (r_stat.fingerprint in top_guard_ips):
            if (r_stat.address not in top_guard_ips[r_stat.fingerprint]):
                top_guard_ips[r_stat.fingerprint][r_stat.address] = [valid_after_ts]
            else:
                top_guard_ips[r_stat.fingerprint][r_stat.address].append(valid_after_ts)
        if (r_stat.fingerprint in top_exit_ips):
            if (r_stat.address not in top_exit_ips[r_stat.fingerprint]):
                top_exit_ips[r_stat.fingerprint][r_stat.address] = [valid_after_ts]
            else:
                top_exit_ips[r_stat.fingerprint][r_stat.address].append(valid_after_ts)
                
for top_guard in top_guards:
    print('{0}:'.format(top_guard), end='')
    for ip in top_guard_ips[top_guard]:
        print('\t{0}'.format(ip), end='')
    print('') #newline

for top_exit in top_exits:
    print('{0}:'.format(top_exit), end='')
    for ip in top_exit_ips[top_exit]:
        print('\t{0}'.format(ip), end='')
    print('') #newline

# top guards output
"""
B746085FCE4F5D4D3ADCCE1D62D34D21C422428D:       85.17.20.241
ADD7E99905E666BEF585AC6B8C5795B1C4422C7A:       82.94.231.195
753E0B5922E34BF98F0D21CC08EA7D1ADEEE2F6B:       137.56.163.64
D82183B1C09E1D7795FF2D7116BAB5106AA3E60E:       84.19.178.6
FF986A4573185A6912A0FF28335210CC05CE00DE:       87.106.249.118
64F9CA01A8465CF6FAEA4DF7945795541E74F42C:       18.85.8.71
01C5B10C5C6B1DEB47612E66EBF315B7C64DE803:       78.142.142.246
9F89491CAB7B03685DEABD358E193FFA74D8D836:       38.229.79.2
00C2C2A16AEDB51D5E5FB7D6168FC66B343D822F:       86.59.119.83
D87A71E5EC936501FBD0E613D309CE4CE2091F62:       85.112.165.75
36D2672D7DA7820236D1007AEDACAF068E68221C:       147.175.187.180
2ABCD0F0459CA3CDE587DBFDC7336B09718F3C0E:       46.165.196.73
C37B234FAD013453B90375EB55864FEBC876104A:       208.53.158.59
4691F2DB0EC3EB22D9E6C56F8BDB15D1E43A60B5:       85.112.165.71
47A608BF6C8D1E0C7C9F8145925120A54CF0DF04:       137.56.163.64
F08F537D245A65D9C242359983718A19650A25F7:       137.56.163.46
6B53D408A434C2410FADA8224097CC60A441F7C5:       216.243.58.198
27C94A1E4DFEDD64C9760556C8E2593EC05EEF46:       85.214.75.110
2FFCCEACE86D8CA306D069386A65359BCEE8D67A:       62.220.136.253
A5391793076E013A8218B56CCADE2A8DE7011D08:       137.56.163.46
E1BEDFFFB8DD4977748500D7F54207AE33375B85:       91.143.90.155
B5E01E7F86AD5A6563F41BF4B244EBFEFB8D5245:       75.126.182.109
C1E400DD480FE1C81BC525B86E17667937743554:       84.19.178.7
84D26BCB09A05AF853C71911C496A194AE02A313:       178.216.200.168
43BE706E24143AB6B3B86DBF7CD4FDE1E0C4CAF1:       149.9.0.58
3BE54669CA572B3126079BC20E46E89280EA3703:       213.163.65.50
5CA270839485FDB08828CA095EF49F465F897B8A:       38.229.70.33
39A0907D409836D7F014364C5FF5AC1DA79E0289:       89.248.168.118
17B82BCC67063E01817E7FD03ED15E345E9FE4A9:       80.249.168.240
B3C940F41C692FEBE7838D608BFF6114F936C3C6:       194.79.28.78
E57A476CD4DFBD99B4EE52A100A58610AD6E80B9:       188.138.104.154
3880FA127EE3C5C147C0E07C80B976BFC557E8FB:       85.17.122.34
"""    
# top exits output
"""
948CDA1CE63D2165567B81706CD8C0E9F8934A47:       198.96.155.3
37848F17E62FE71A2B7A79C2F2785DEB14BA41DD:       176.31.108.212
AD6C2377E01611F56C33F84BB4AE663A1DA5B3B3:       31.172.30.1
B93DCC053D7F0472BB17A4514E06FE76D9FB714B:       77.247.181.165
4186509C707E96B77B51A76F8294D7E22FF52C61:       74.120.15.150
14BE6D0789A234BC4C1866B809D8062D22EE38CF:       87.236.194.158
09C0C5800177BF3A11A78A98A1CAFD8E7AD2EA02:       146.185.23.181
B103DA1150F11F1018664CD2B6FD6A6005FA907C:       37.59.82.50
7DCB5313B9541DD29C94BFDE0ADF91DC91D2CFE9:       77.247.181.165
04B24C51D6C8D615FBC3168446963A9E771E0389:       81.170.234.182
F3D4C7479F8789758A77FF61D2D8929311568394:       109.163.233.205
FE6830704AB953189789AE04C5B22DE34CA2B9D8:       173.254.216.67
43691853EA556C21A77E006886A5DC579855F527:       109.163.233.201
9D4D995AA745A3CAA6276AFAD505D3E4097AA075:       204.8.156.142
D223399907113A1F216AAA64997BC1D4CFA8E1AC:       146.185.23.179
945CBBA599808018749DDC4EBB592168F2858C1B:       146.185.23.180
0ECBAB33DD27A6DA5C1141B39F839F931F92334C:       109.163.233.200
DD8BD7307017407FCC36F8D04A688F74A0774C02:       171.25.193.20
C268951C14DFA5265004B8AB10BE3A33EC00DA16:       178.33.169.35
6F383C2629471E1AE7DA053D04625AAED69844CC:       96.44.163.77
805A401EC14E1C6013CB5D9952CC117F466BA805:       91.219.238.71
9C98B38FE270546C69205E16047B8D46BBBB0447:       173.254.216.69
A10C4F666D27364036B562823E5830BC448E046A:       171.25.193.21
CA1CF70F4E6AF9172E6E743AC5F1E918FFE2B476:       62.220.135.129
67FD1D03F922975269F94EC7E4FD38C6D0E5E900:       74.120.13.132
A9C039A5FD02FCA06303DCFAABE25C5912C63B26:       80.237.226.75
FA486415B86D28CD047D10F76768E4E88A182F71:       178.217.184.147
3A415473854F9F082F16EECDFE436218FE1169EA:       173.254.216.68
2624AE0466BD02AFAF3F263D4361D79ABE0E7E05:       93.182.132.100
659DF6537D605FEAB3B77E58E75342D704F0A799:       80.237.226.74
A59E1E7C7EAEE083D756EE1FF6EC31CA3D8651D7:       31.172.30.2
505BD69565964F7B20D51A3FC4A4825BD93CA444:       93.182.132.103
CFA48FC3E843DFF01AA026EC77010AB57E8C2FF0:       31.172.30.3
1D8625690AB9729FB2040D8194EC0D6789A4D092:       79.172.193.89
DB8C6D8E0D51A42BDDA81A9B8A735B41B2CF95D1:       77.247.181.164
253DFF1838A2B7782BE7735F74E50090D46CA1BC:       77.247.181.162
557BF41C1CE1E1B48283B7E97630E42DED889A3D:       93.182.132.103
7610BBD3F5BB67284EEE8476721AE6109DC29BEA:       80.237.226.73
055D304E29CF064A8CB8AB2C13AEDB836BB79AF5:       173.254.192.36
24B1F63F7DF9F85D711864811CC401BE5EB5FB9A:       77.247.181.163
721E494B0E06554D8F9A169BDBF17282C07B2588:       66.230.230.230
624926802351575FF7E4E3D60EFA3BFB56E640ED:       46.165.196.182
F97F3B153FED6604230CD497A3D1E9815B007636:       173.254.216.66
35E8B344F661F4F2E68B17648F35798B44672D7E:       176.9.53.41
6586CEE14353DD1E6FAF3F172A23B00119A67C57:       96.44.163.75
3D0FAFB36EB9FC9D1EFD68758E2B0025117D3D1B:       96.44.163.76
B8F81CF0C665EA8BE947F102CBFF97615F1FF300:       31.172.30.4
47916CAB5878C810E7EF71A316D37FC823CC7F52:       217.115.137.222
DA29C7BD34640D749392DFA7919AB1E9AEADC311:       173.254.192.35
92D151A8219CC742DE7E0EAEB6D18FAF9793BA79:       80.237.226.76
"""

##### Aggregate relays that appear in consensus with descriptor 3/12-3/13 #####
import json
in_dir = 'out/network-state-2012-03--2013-03'
out_file = 'relays.2012-03--2013--03.json'
network_state_files = []
for dirpath, dirnames, filenames in os.walk(in_dir, followlinks=True):
    for filename in filenames:
        if (filename[0] != '.'):
            network_state_files.append(os.path.join(dirpath,filename))

# aggregate relays in consensuses with descriptors
relays = {}
network_state_files.sort(key = lambda x: os.path.basename(x))
num_addresses = 0
for ns_file in network_state_files:
    print('Reading {0}'.format(os.path.basename(ns_file)))
    with open(ns_file, 'r') as nsf:
        consensus = pickle.load(nsf)
        descriptors = pickle.load(nsf)
    for relay in consensus.relays:
        if (relay in descriptors):
            if relay in relays:
                if (descriptors[relay].address not in relays[relay]['a']):
                    relays[relay]['a'].append(descriptors[relay].address)
                    num_addresses += 1                    
            else:
                relays[relay] = {\
                    'n':relay.nickname,\
                    'f':relay.fingerprint,\
                    'a':[descriptors[relay].address],\
                    'r':True}
                num_addresses += 1
print('Num relays: {0}'.format(len(relays)))
print('Num addresses: {0}'.format(num_addresses))

# turn relays dict into {'relays':[relay dict]} and write to disk
relays_list = []
for rel_fp, rel_dict in relays:
    relays_list.append(rel_dict)
relays_out = {'relays':relays_list}
with open(out_file, 'w'):
    json.dump(relays_out)
# {"relays":[
# {"n":"PelmenTorRelay","f":"3CE26C7E299224F958BBC6BF76101CD2AF42CEDE","a":["2.93.158.149"],"r":false},
# {"n":"darwinfish","f":"9DD5F90D641D835C4FCA7153148B156E6FD49CEE","a":["46.4.106.18"],"r":true}
# ]
# }                
##########